Section 25
---------------------------------
Transaction and Concurrency Control :-
------------------------------------

 - DATA TRANSACTION ;-
 
       - Group of database statement perform togather.
	   - A database transaction is a single unit of work that consists of one or more operations.
	   - They have certain properties
	     - ACID Properties 
   		 - ACID stands for Atomicity, Consistency, Isolation, and Durability. 
		 - These are the properties of a transaction. Here is the small description of all of them:

  - ATOMICITY: 
              - The atomicity property identifies that the transaction is atomic. 
			  - An Atomic transaction is either fully completed, or is not begun at all. 
			  - If for any reason an error occurs and the transaction is unable to complete all of its steps, the then system is returned to the state it was in before the transaction was started.

  - CONSISTENCY: 
               - A transaction enforces Consistency in the system state by ensuring that at the end of any transaction the system is in a valid state. 
			   - If the transaction completes successfully, then all changes to the system will have been properly made, and the system will be in a valid state. 
			   - If any error occurs in a transaction, then any changes already made will be automatically rolled back.

  - ISOLATION: 
             - When a transaction runs in Isolation, it appears to be the only action that the system is carrying out at one time. 
			 - If there are two transactions that are both performing the same function and are running at the same time, transaction isolation will ensure that each transaction thinks it has exclusive use of the system.

  - DURABILITY: 
             - A transaction is Durable in that once it has been successfully completed, all of the changes it made to the system are permanent. 
			 - There are safeguards that will prevent the loss of information, even in the case of system failure.
			 
			 
  

   - CREATE A TABLE ACCOUNT.

   - DROP TABLE IF EXISTS accounts;

    CREATE TABLE accounts 
	(
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
    );   
	
	
	- THEN INSERT THE VALUES INTO TABLES.
	
	- INSERT INTO accounts(name,balance)VALUES('Bob',10000);
	
	
	
	- START  THE TRANSACTION
	   BEGIN;
      INSERT INTO accounts(name,balance)
      VALUES('Alice',10000);
	  
	- YOUR DATA SAVE BUT YOU NOT DISPLAY YOUR DETAILS BECAUSE YOUR TRANACTION IS RUNNING THAT REASION.
	- YOU NEED TO COMMIT OR ROLL BACK YOUR DATA .
	  
	- BEGIN;
      INSERT INTO accounts(name,balance)
      VALUES('Alice',10000);
     COMMIT;  
	 
	- COMMIT  : MAKE ALL DATA SAVE ON YOUR DATABASE.
	- ROLLBACK : IF ANY ERROR OCCUR ON YOUR QUERY THEN TRANSACTION BECOME ROLL BACK ON YOUR PREVIOUS STATE.
	
	
	1)--- start a transaction
        BEGIN;

      -- deduct 1000 from account 1
       UPDATE accounts 
       SET balance = balance - 1000
       WHERE id = 1;

      -- add 1000 to account 2
       UPDATE accounts
       SET balance = balance + 1000
       WHERE id = 2; 

      -- select the data from accounts
      SELECT id, name, balance
      FROM accounts;

     -- commit the transaction
     COMMIT;
	
   2) 
    -- begin the transaction
      BEGIN;
 
    -- deduct the amount from the account 1
     UPDATE accounts 
     SET balance = balance - 1500
     WHERE id = 1;

    -- add the amount from the account 3 (instead of 2)
     UPDATE accounts
     SET balance = balance + 1500
     WHERE id = 3; 

    -- roll back the transaction
    ROLLBACK;
	
UDEMY PRACTICES :-


 II) - SIMPLE TRANSACTION CONTROL :-
 
    SYNTAX :
	
	  STATRT TRANSACTION;
	  STATEMENTS;
	  COMMIT;
	  
	 EXAMPLE :- 

     1) UPDATE ORDER LAVEL AND FIND THE COUNT OF ITEMS THAT NEEDS REORDERING IN ONE TRANSACTION.
     
     -> START TRANSACTION ;
        UPDATE products 
        SET reorderlevel = reorderlevel - 5;
        SELECT COUNT(*) FROM products WHERE unitsinstock + unitsonorder < reorderlevel;
        COMMIT;

     2)CREATE A SINGLE TRANSACTON TO INCREASE THE REQUIRED DATE IN ORDERS BY ONE DAY FOR DECEMBER 2017 AND DECREASES IT BY ONE DAY FOR NOVEMBER 2017.
	 
	 ->
	 
	    START TRANSACTION ;

        UPDATE orders 
        SET requireddate = requireddate + INTERVAL '1 DAYS'
        WHERE orderdate BETWEEN '1997-12-01' AND '1997-12-31';

        UPDATE orders 
        SET requireddate = requireddate - INTERVAL '1 DAYS'
        WHERE orderdate BETWEEN '1997-11-01' AND '1997-11-30';

        COMMIT;
		
2)ROLLBACK AND SAVEPOINT :-

      1) UPDATES ORDERS AND ROLLBACKS
	  -> START TRANSACTION ;

        UPDATE orders 
        SET requireddate = requireddate + INTERVAL '1 YEARS';

        ROLLBACK;
		
	2) START TRANSACTION , INSERT A NEW EMPLOYEE , CREATE A SAVEPOINT , UPDATE HIREDATE AND ROLLBACK TO SAVEPOINT.

    -> 	
       START TRANSACTION ;

        INSERT INTO employees(employeeid,lastname,firstname,title,birthdate,hiredate) 
        VALUES(901,'Sue','Jones','op','1999-05-23','2017-06-13');
  
        SAVEPOINT insert_employee;

        UPDATE employees 
        SET birthdate = '2022-07-11';

        ROLLBACK TO insert_employee;
 
       UPDATE employees 
       SET birthdate = '1998-07-01'
       WHERE employeeid = 901;

     COMMIT;  
	 
	 
4)POSTGRESSQL TRASACTIO ISOLATION :-

 - 	 
	  
	  